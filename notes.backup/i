1、如何查看 Hive 自带的函数？ 怎么查看函数的详细信息
show functions;
desc function extended date_add;



2、写出常用的 hdfs 命令
文件操作
hdfs dfs -cat <file-name>
hdfs dfs -ls <hdfs-dir-name>
hdfs dfs -rm -r <file-or-dir-name>
hdfs dfs -copyFromLocal <file-name> <hdfs-file-dir>
hdfs dfs -copyToLocal <hdfs-file-dir-or-name> <local-file-dir-or-name>



3、Redis 分布锁如何实现
借助 Redis 的原子命令 setnx 控制
或者通过 Lua 脚本的原子操作进行实现


4、HDFS 中 Fsimage 和 Edit 的区别？
Fsimage 是 NameNode 中元数据的镜像，包含 HDFS 中的目录以及文件信息
Edit 文件存储 Client 对  HDFS 的更新操作



5、Flume 拦截器做了什么？
对收集到的事件进行处理
对接受到的事件内容或者头信息增加额外的信息，如 hostname, timestamp
修改消息头或者内容
根据情况丢弃无用的信息



6、HDFS 如何保证数据安全的
通过多个 DataNode 将数据分布式存储在不同的机器上，同时通过 NameNode 存储元数据，每个文件在多台机器上有多个副本，即使某一台机器宕机仍然有其他可用副本保留



7、Hive 与 HBase 的区别是什么?
Hbase 列式数据库，是支持大数据量、实时查询的列存储系统，查询速度快
Hive 是将 SQL 转换成 MapReduce 任务的工具，属于数据仓库工具，部署数据库，查询速度相对较慢


8、Hive 中的 sort by , order by, cluster by , distribute by 各自代表什么意思？
order by 对应全局排序，一般效率较低，只有一个 Reduce 来保证
sort by 对应与 MR 内部的排序，非全局的有序，为每个 reduce 产生一个排序文件，使得局部有序
cluster by  对应分区排序，将特定的行发送
distribute by 是 sort by 和 cluster by 的列相同的情况下的简单写法，只能是升序的




































1、kafka 零拷贝的原理
传统 IO: 从磁盘读取文件 ==> 内核缓存 ==> 用户缓存 ==>  socket 网络缓冲区 ==> 网卡发送出去
转换成 从磁盘读取文件，再通过 socket 发送出去
减少了 IO 中断




2、Hive SQL 中 select from where group by limit order by 执行顺序?
通过 explain 查看 HiveSQL 执行计划
from 到 where 到 select --> group by --> order by --> limit
基于 MapReduce
Map 阶段：
  from 加载
  where 过滤
  select 查询
  group by 分区
  map 端文件合并
reduce 阶段
  group by 对 map 端的数据进行分区计算
  select 过滤输出的结果
  limit 排序的结果输出


3、Hive 为何分区，分区的元数据存放在哪
避免全表扫描，提高查询效率，通过分区方便编写幂等的 override sql 语句
根据选择的元数据管理控制，默认是存放在内建的 derby 中， 本地模式一般存放在关系型数据库中，若为远程模式，交由 xxx 控制



4、Yarn 资源调度策略
先进先出： 先来的任务先调度后来的后调度
容量调度： 默认的调度策略，支持多个队列共享集群资源
公平调度：CDH 版本默认的调度策略，抢占式分配



5、MR 中 shuffle 的过程和作用
Shuffle 的过程：
按照 key 进行分区，可对分区内部的数据进行排序，最终将输出的结果分发给对应的 reduce task 进行处理

作用： 将 Map 阶段处理的数据传递到 Reduce 阶段




6、HBase 如何读取数据
客户端向 zk 获取 meta 表的 region 位置，读取其中的数据
根据查询的 namesapce, tablename, rowkey 信息，找到写入数据的 region 信息
找到 region 对应的 regionserver, 发送读请求
尝试到 memstore 中查找，若有则返回，没有到 BlockCache 中读取
BlockCache 中查找到则返回，没有到 StoreFile 中读取
在 StoreFile 中找到后，将数据写入到 BlockCache 中，并加数据返回给 client



7、kafka 的偏移量 offset 存放在哪，为什么？
低版本中是存放在 zookeeper 中, 现在存放在一个公共的 brokder，称为集群管理器，交给 brokder 中的主题 __consumer_offset 进行控制 
方便统一的控制




8、简述 HBase 的 rowkey 设计原则
长度原则： 长度尽量不超过 16字节
散列原则： 尽可能的散列
唯一原则： 保证唯一性
顺序原则： 考虑 ASCII 有序


9、Redis 缓存穿透、缓存雪崩、缓存击穿
雪崩： 缓存大规模失效，大量请求查询数据库导致数据库宕机
穿透： 大量请求查询 key 在缓存中不存在，且在数据库中也不存在，导致数据库宕机
击穿： 设置过期时间的 key 在过期后的某个时间点被大量访问，导致数据库宕机



10、zookeeper 的选举机制， 还可以用 zookeeper 做什么？
半数选举机制，超过半数以上的选择作为 leader，

做分布式锁，保证数据的强一致性
做配置的同步，借助 zk 监听指定节点的变更，进行配置的同步
通过 ZK 实现 Haddoop 的 HA 高可用



11、Flume 丢不丢数据
借助 take 和 put 事务，保证在 flume 内部有原子性
在 Flume 发生故障的时候会记录当前进行的位置，在恢复后进行重做，不会丢失，可能在 sink 到目标组件的时候重复


12、列式和式行存储的区别
列式存储数据按照列为基础逻辑存储单元进行存储
数据查询上： 列存储查询指定的列速度快，行存储相对慢



















1、hive 怎么优化
架构层面： 
更换更快的计算引擎替换掉默认的，如 tez, spark
表定义上： 根据需要利用好分区表和分桶表
存储上： 考虑使用压缩的存储

配置层面： 
配置 JVM 重用
再 map 端之前前合并小文件，减少 map 数
配置并行执行，将查询过程中的 stage 无依赖关系的进行比ing行执行

sql 优化：
根据实际情况优化响应的 SQL
如处理空值和默认值，调整 Map 和 Reduce 的数量



2、redis 热键问题， redis 的数据类型
大量请求同一个键，导致特定的缓存机器负载过高，可以将热键分开存放到不通的机器上，减轻负载，若键过大，考虑拆分存放

常见的有 string, list, set, hash, zset


3、Flume 事务实现
分为 Take 事务和 Put 事务。
Put 事务是在 source 到 channel 的过程中，数据封装成一批 event，这些 event 处在同一个事务中，对应将这批 event 放到 channel 中
Take 事务对应的 put事务是将这批数据从 sink 放到输出组件
对于 put 事务，有 doPut, doCommit, doRollback 方法控制，doput 将一批数据放到 putList 中，放入后，调用 doCommit, 将 putList 所有的 Event 放到 Channle, 之后清空
在 doCommit，事务到 channel 的过程中出现问题的时候进行 rollbak, 将 putlist 清空并跑出异常，让 source 感知到次异常，之后 source 将之前的一批数据重新采集。


4、数据同样存放在 hdfs, 为何 hbase 支持在线查询？
hbase 是列式存储的数据库，使用时数据大多存储在内存中


5、Flume HDFS Sink 小文件处理
调整下 HDFS 的滚动策略，通过时间、文件大小、event 数量、文件空闲时间进行滚动，适当调大事件和文件大小进行避免




6、Hive 自定义哪些 UDF 函数
用户自定义的函数  
用户自定义聚集函数 
用户自定义表生成函数 


7、Kafka 分区分配策略
RangeAssignor 范围分配，对 topic 中的分区，以及订阅的消费组中的消费者排序，尽量保证均衡的分配
RoundRobinAssignor 轮训分配, 将 topic 中的 分区和消费者尽量均衡分配
StickyAssignor 粘性分配，尽可能让分区分配到之前的，减少分区的变动，节省开销


8、谈谈数据倾斜，如何发生，给出优化方案
可能由于 OOM，某个 Task 运行太长，运行的 Task 失败导致

原因可能是
数据异常，如对于控制和缺省值太多
Redus 端的数据


方案： 根据不同的情况进行不同的处理
若空值/缺省值较多，可根据业务情况选择舍弃这些数据的分析



9、Hadoop 优化时经常修改的配置文件和其中的配置项
core-site.xml: 核心的配置，I/O 配置
hdfs-site.xml: HDFS 守护程序配置设置，指定副本数
mapred-site: 为 MapReduce 相关的配置，指定框架名称, 是否重用 jvm
yarn-site: 指定 ResourceManager 和 NodeManager 的配置设置，更改调度策略




10、MySQL 索引如何理解？ 常用引擎是什么？ 有什么区别？ 
比较 Redis 和 MySQL 区别?
说下各自的持久化机制？


索引是加速数据查找的

MySQL 常见的存储引擎是 InnoDB， MyISAM， Memecache，Archive
Innodb 是支持事务的，锁的粒度可以为行级，数据出现故障时易于恢复
MyISAM 不支持事务，锁的粒度只能到表级别，


Redis 是非关系型数据库，数据主要存放在内存中，数据相对与 MySQL 存放的较少、数据结构一般比较简单，数据访问速度较快
MySQL 是关系型数据库，数据都是存放在磁盘上，数据可以存放的较多、数据结构可以复杂，数据访问相对与 Redis 一般较慢


Redis 支持 RDB 和 AOF 持久化，RDB 是将
AOF 是追加写的方式记录，恢复起来相对于 RDB 比较慢
MySQL 通过 binlog ...

